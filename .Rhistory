runApp('BMI')
runApp('BMI')
runApp('BMI')
runApp('BMI')
runApp('BMI')
library(shiny)
library(tidyverse)
library(jsonlite)
library(lubridate)
library(httr)
r <- GET(
"https://api.edamam.com/api/food-database/v2/parser",
query = list(
app_id = "09a1fbd8",
app_key = "f6ba5f44b9ec343b834ed1ea4ed83e73",
ingr = "double double",
category = "fast-foods"
)
)
r <- GET(
"https://api.edamam.com/api/food-database/v2/parser",
query = list(
app_id = "09a1fbd8",
app_key = "f6ba5f44b9ec343b834ed1ea4ed83e73",
ingr = "double double",
category = "fast-foods"
)
)
stop_for_status(r)
json <- content(r, as = "text")
names(fromJSON(json))
a <-fromJSON(json)$hints[1][1][1]
a
knitr::opts_chunk$set(echo = TRUE)
r <- GET(
"https://api.edamam.com/api/food-database/v2/parser",
query = list(
app_id = "09a1fbd8",
app_key = "f6ba5f44b9ec343b834ed1ea4ed83e73",
ingr = "double double",
category = "fast-foods"
)
)
stop_for_status(r)
json <- content(r, as = "text")
names(fromJSON(json))
a <-fromJSON(json)$hints[1][1][1]
a %>% select(food) %>% flatten() %>% select(c(food.brand,food.category))
r <- GET(
"https://api.edamam.com/api/food-database/v2/parser",
query = list(
app_id = "09a1fbd8",
app_key = "f6ba5f44b9ec343b834ed1ea4ed83e73",
ingr = "double double",
category = "fast-foods"
)
)
stop_for_status(r)
json <- content(r, as = "text")
names(fromJSON(json))
a <-fromJSON(json)$hints
a %>% select(food) %>% flatten() %>% select(c(food.brand,food.category))
runApp('BMI')
runApp('BMI')
runApp('BMI')
runApp('BMI')
r <- GET(
"https://api.edamam.com/api/food-database/v2/parser",
query = list(
app_id = "09a1fbd8",
app_key = "f6ba5f44b9ec343b834ed1ea4ed83e73",
ingr = "double double",
category = "fast-foods"
)
)
stop_for_status(r)
json <- content(r, as = "text")
names(fromJSON(json))
a <-fromJSON(json)$hints
a %>% select(food) %>% flatten() %>% select(c(food.brand,food.category))
a %>% select(food) %>% flatten()
runApp()
runApp('BMI')
runApp('BMI')
shiny::runApp('BMI')
runApp('demo')
runApp()
runApp('BMI')
shiny::runApp('BMI')
runApp('BMI')
library(dplyr)
runApp('BMI')
runApp('BMI')
runApp('BMI')
runApp('BMI')
runApp('BMI')
runApp('BMI')
runApp('BMI')
runApp('BMI')
runApp('BMI')
runApp('BMI')
runApp('BMI')
runApp('BMI')
knitr::opts_chunk$set(echo = TRUE)
r <- GET(
"https://api.edamam.com/api/food-database/v2/parser",
query = list(
app_id = "09a1fbd8",
app_key = "f6ba5f44b9ec343b834ed1ea4ed83e73",
ingr = "ice cream",
category = "packaged-foods"
)
)
stop_for_status(r)
json <- content(r, as = "text")
names(fromJSON(json))
a <-fromJSON(json)$hints
a %>% select(food) %>% flatten() %>% select(c(food.brand,food.category))
a %>% select(food) %>% flatten()
a %>% select(food)
a$food
a$food %>% select(brand)
a$food %>% select(brand,nutrients)
a$food %>% select(brand,nutrients) %>% flatten()
shiny::runApp('BMI')
runApp('BMI')
runApp('BMI')
knitr::opts_chunk$set(echo = TRUE)
a <- "hamburger"
r <- GET(
"https://api.edamam.com/api/food-database/v2/parser",
query = list(
app_id = Sys.getenv("ID"),
app_key = Sys.getenv("KEY"),
ingr = a,
category = "packaged-foods"
)
)
stop_for_status(r)
json <- content(r, as = "text")
names(fromJSON(json))
a <-fromJSON(json)$hints$food %>% flatten()
tbl <- a %>% select(brand,nutrients) %>% flatten()
a <- "hamburger"
r <- GET(
"https://api.edamam.com/api/food-database/v2/parser",
query = list(
app_id = Sys.getenv("ID"),
app_key = Sys.getenv("KEY"),
ingr = a,
category = "packaged-foods"
)
)
stop_for_status(r)
json <- content(r, as = "text")
names(fromJSON(json))
a <-fromJSON(json)$hints$food %>% flatten()
tbl <- a %>% select(brand,nutrients) %>% flatten()
a
a <-fromJSON(json)$hints$food
tbl <- a %>% select(brand,nutrients) %>% flatten()
head(tbl$brand,10)
tbl
runApp('BMI')
runApp('BMI')
shiny::runApp('BMI')
runApp('BMI')
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(jsonlite)
library(lubridate)
library(httr)
readRenviron(".Renviron")
a <- "hamburger"
r <- GET(
"https://api.edamam.com/api/food-database/v2/parser",
query = list(
app_id = Sys.getenv("ID"),
app_key = Sys.getenv("KEY"),
ingr = a,
category = "packaged-foods"
)
)
stop_for_status(r)
json <- content(r, as = "text")
names(fromJSON(json))
a <-fromJSON(json)$hints$food
tbl <- a %>% select(brand,nutrients) %>% flatten()
head(tbl$brand,10)
tbl
a <-fromJSON(json)$hints$food
a
a <-fromJSON(json)$hints$food%>% flatten()
a
r <- GET(
"https://api.edamam.com/api/food-database/v2/parser",
query = list(
app_id = Sys.getenv("ID"),
app_key = Sys.getenv("KEY"),
ingr = a,
category = "generic-foods"
)
)
a <- "hamburger"
r <- GET(
"https://api.edamam.com/api/food-database/v2/parser",
query = list(
app_id = Sys.getenv("ID"),
app_key = Sys.getenv("KEY"),
ingr = a,
category = "generic-foods"
)
)
stop_for_status(r)
json <- content(r, as = "text")
names(fromJSON(json))
a <-fromJSON(json)$hints$food%>% flatten()
tbl <- a %>% select(brand,nutrients) %>% flatten()
a
runApp('BMI')
runApp('BMI')
runApp('BMI')
a <-fromJSON(json)$hints$food%>% flatten()
a <-fromJSON(json)$hints$food%>% flatten()
a
r <- GET(
"https://api.edamam.com/api/food-database/v2/parser",
query = list(
app_id = Sys.getenv("ID"),
app_key = Sys.getenv("KEY"),
ingr = a,
category = "fast-foods"
)
)
a <- "hamburger"
r <- GET(
"https://api.edamam.com/api/food-database/v2/parser",
query = list(
app_id = Sys.getenv("ID"),
app_key = Sys.getenv("KEY"),
ingr = a,
category = "fast-foods"
)
)
stop_for_status(r)
json <- content(r, as = "text")
names(fromJSON(json))
a <-fromJSON(json)$hints$food%>% flatten()
tbl <- a %>% select(brand,nutrients) %>% flatten()
a
tbl <- a %>% select(brand,nutrients,serrvingSizes) %>% flatten()
tbl <- a %>% select(brand,serrvingSizes) %>% flatten()
a <- "hamburger"
r <- GET(
"https://api.edamam.com/api/food-database/v2/parser",
query = list(
app_id = Sys.getenv("ID"),
app_key = Sys.getenv("KEY"),
ingr = a,
category = "fast-foods"
)
)
stop_for_status(r)
json <- content(r, as = "text")
names(fromJSON(json))
a <-fromJSON(json)$hints$food%>% flatten()
tbl <- a %>% select(brand,serrvingSizes) %>% flatten()
a
tbl <- a %>% select(brand,servingSizes) %>% flatten()
head(tbl$brand,10)
tbl
tbl <- a %>% select(servingSizes) %>% flatten()
tbl
a$servingSizes %>% flatten()
a$servingSizes %>% flatten()
a <- "hamburger"
r <- GET(
"https://api.edamam.com/api/food-database/v2/parser",
query = list(
app_id = Sys.getenv("ID"),
app_key = Sys.getenv("KEY"),
ingr = a,
category = "fast-foods"
)
)
stop_for_status(r)
json <- content(r, as = "text")
names(fromJSON(json))
a <-fromJSON(json)$hints$food%>% flatten()
tbl <- a %>% select(servingSizes) %>% flatten()
head(tbl$brand,10)
tbl
a$servingSizes %>% flatten()
a$servingSizes
a$servingSizes
a$servingSizes %>% select(label,quantity)
a$servingSizes %>% select(label,quantity)
r <- GET(
"https://api.edamam.com/api/food-database/v2/parser",
query = list(
app_id = Sys.getenv("ID"),
app_key = Sys.getenv("KEY"),
ingr = a,
category = "fast-foods"
)
)
a[1]$servingSizes %>% select(label,quantity)
a$servingSizes %>% select(label,quantity)
a$servingSizes
a$servingSizes[1] %>% select(label,quantity)
a$servingSizes[1]
a$servingSizes[1][1] %>% select(label,quantity)
a$servingSizes[1][1]
a$servingSizes[[1]]
a$servingSizes[[1]] %>% select(label,quantity)
a <-fromJSON(json)$hints$food%>% flatten()
a
a %>% select(label,brand,servingSizes,nutrients.ENERC_KCAL,nutrients.PROCNT,nutrients.FAT,nutrients.CHOCDF,nutrients.FIBTG)
a %>% select(label,brand,servingSizes,nutrients.ENERC_KCAL,nutrients.PROCNT,nutrients.FAT,nutrients.CHOCDF,nutrients.FIBTG) %>% flatten()
a %>% select(label,brand,servingSizes,nutrients.ENERC_KCAL,nutrients.PROCNT,nutrients.FAT,nutrients.CHOCDF,nutrients.FIBTG) %>% flatten(servingSizes)
runApp('BMI')
runApp('BMI')
r <- GET(
"https://api.edamam.com/api/food-database/v2/parser",
query = list(
app_id = Sys.getenv("ID"),
app_key = Sys.getenv("KEY"),
ingr = a,
category = "generic-foods"
)
)
a <- "hamburger"
r <- GET(
"https://api.edamam.com/api/food-database/v2/parser",
query = list(
app_id = Sys.getenv("ID"),
app_key = Sys.getenv("KEY"),
ingr = a,
category = "generic-foods"
)
)
stop_for_status(r)
json <- content(r, as = "text")
names(fromJSON(json))
br <- "Del Taco"
a <-fromJSON(json)$hints$food%>% flatten()
tbl <- a %>% select(servingSizes) %>% flatten()
a
a %>% select(label,image,nutrients.ENERC_KCAL,nutrients.PROCNT,nutrients.FAT,nutrients.CHOCDF,nutrients.FIBTG) %>% flatten()
runApp('BMI')
runApp('BMI')
tbl<- a %>% select(label,image,nutrients.ENERC_KCAL,nutrients.PROCNT,nutrients.FAT,nutrients.CHOCDF,nutrients.FIBTG) %>% flatten()
tbl<- a %>% select(label,image,nutrients.ENERC_KCAL,nutrients.PROCNT,nutrients.FAT,nutrients.CHOCDF,nutrients.FIBTG) %>% flatten()
tbl <- tibble(lable = tbl$label,Calories = tbl$nutrients.ENERC_KCAL,
Protein = tbl$nutrients.PROCNT,Fat = tbl$nutrients.FAT,
Carbonhydrate = tbl$nutrients.CHOCDF,
Fiber = tbl$nutrients.FIBTG)
tbl<- a %>% select(label,image,nutrients.ENERC_KCAL,nutrients.PROCNT,nutrients.FAT,nutrients.CHOCDF,nutrients.FIBTG) %>% flatten()
df <- tibble(lable = tbl$label,Calories = tbl$nutrients.ENERC_KCAL,
Protein = tbl$nutrients.PROCNT,Fat = tbl$nutrients.FAT,
Carbonhydrate = tbl$nutrients.CHOCDF,
Fiber = tbl$nutrients.FIBTG)
df
tbl<-a %>%
select(label,brand,servingSizes,nutrients.ENERC_KCAL,nutrients.PROCNT,
nutrients.FAT,nutrients.CHOCDF,nutrients.FIBTG) %>% flatten()
a <- "hamburger"
r <- GET(
"https://api.edamam.com/api/food-database/v2/parser",
query = list(
app_id = Sys.getenv("ID"),
app_key = Sys.getenv("KEY"),
ingr = a,
category = "fast-foods"
)
)
stop_for_status(r)
json <- content(r, as = "text")
names(fromJSON(json))
br <- "Del Taco"
a <-fromJSON(json)$hints$food%>% flatten()
tbl <- a %>% select(servingSizes) %>% flatten()
head(tbl$brand,10)
tbl
a$servingSizes[[1]] %>% select(label,quantity)
tbl<-a %>%
select(label,brand,servingSizes,nutrients.ENERC_KCAL,nutrients.PROCNT,
nutrients.FAT,nutrients.CHOCDF,nutrients.FIBTG) %>% flatten()
df <- tibble(lable = tbl$label,brand = tbl$brand, Calories = tbl$nutrients.ENERC_KCAL,
Protein = tbl$nutrients.PROCNT,Fat = tbl$nutrients.FAT,
Carbonhydrate = tbl$nutrients.CHOCDF,
Fiber = tbl$nutrients.FIBTG)
df
runApp('BMI')
df$brand[br]
br <- "Del Taco"
df$brand
df$brand[br]
df %>% select(brand ==c)
df %>% select(brand =c)
df
df %>% select(brand)
df %>% filter(brand=c)
df %>% filter(brand==c)
df %>% filter(brand== br)
runApp('BMI')
runApp('BMI')
runApp('BMI')
runApp('BMI')
req(input$brand != "",cancelOutput = T)
runApp('BMI')
runApp('BMI')
runApp('BMI')
runApp('BMI')
a <- "hamburger"
r <- GET(
"https://api.edamam.com/api/food-database/v2/parser",
query = list(
app_id = Sys.getenv("ID"),
app_key = Sys.getenv("KEY"),
ingr = a,
category = "generic-foods"
)
)
stop_for_status(r)
json <- content(r, as = "text")
names(fromJSON(json))
br <- "Del Taco"
a <-fromJSON(json)$hints$food%>% flatten()
tbl <- a %>% select(servingSizes) %>% flatten()
tbl<- a %>% select(label,image,nutrients.ENERC_KCAL,nutrients.PROCNT,nutrients.FAT,nutrients.CHOCDF,nutrients.FIBTG) %>% flatten()
df <- tibble(lable = tbl$label,Calories = tbl$nutrients.ENERC_KCAL,
Protein = tbl$nutrients.PROCNT,Fat = tbl$nutrients.FAT,
Carbonhydrate = tbl$nutrients.CHOCDF,
Fiber = tbl$nutrients.FIBTG)
df %>% filter(brand== "Hamburger")
tbl<- a %>% select(label,image,nutrients.ENERC_KCAL,nutrients.PROCNT,nutrients.FAT,nutrients.CHOCDF,nutrients.FIBTG) %>% flatten()
df <- tibble(lable = tbl$label,Calories = tbl$nutrients.ENERC_KCAL,
Protein = tbl$nutrients.PROCNT,Fat = tbl$nutrients.FAT,
Carbonhydrate = tbl$nutrients.CHOCDF,
Fiber = tbl$nutrients.FIBTG)
df %>% filter(label== "Hamburger")
tbl<- a %>% select(label,image,nutrients.ENERC_KCAL,nutrients.PROCNT,nutrients.FAT,nutrients.CHOCDF,nutrients.FIBTG) %>% flatten()
df <- tibble(lable = tbl$label,Calories = tbl$nutrients.ENERC_KCAL,
Protein = tbl$nutrients.PROCNT,Fat = tbl$nutrients.FAT,
Carbonhydrate = tbl$nutrients.CHOCDF,
Fiber = tbl$nutrients.FIBTG)
df %>% filter(label== "Hamburger")
df %>% filter(lable== "Hamburger")
runApp('BMI')
runApp('BMI')
runApp('BMI')
runApp('BMI')
runApp('BMI')
runApp('BMI')
runApp('BMI')
runApp('BMI')
runApp('BMI')
runApp('BMI')
runApp('BMI')
runApp('BMI')
runApp('BMI')
runApp('BMI')
runApp('BMI')
runApp('BMI')
runApp('BMI')
runApp('BMI')
runApp('BMI')
shiny::runApp('BMI')
runApp('BMI')
runApp('BMI')
runApp('BMI')
runApp('BMI')
runApp('BMI')
runApp('BMI')
runApp('BMI')
shiny::runApp('BMI')
runApp('BMI')
runApp('BMI')
runApp('BMI')
runApp('BMI')
runApp('BMI')
runApp('BMI')
runApp()
runApp('BMI')
runApp()
runApp('BMI')
runApp('BMI')
runApp('BMI')
runApp('BMI')
runApp('BMI')
runApp('BMI')
runApp('BMI')
runApp('BMI')
runApp('BMI')
runApp('BMI')
runApp('BMI')
runApp('BMI')
runApp('BMI')
runApp('BMI')
runApp('BMI')
?numeric
runApp('BMI')
?paste
paste("1st", "2nd", "3rd", collapse = ", ")
runApp('BMI')
runApp('BMI')
runApp('BMI')
runApp('BMI')
runApp('BMI')
runApp('BMI')
runApp('BMI')
